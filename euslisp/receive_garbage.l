(ros::load-ros-manifest "roseus")
(ros::roseus "grasp_object")

					;(speak-jp "ゴミがを捨ててあげるよxo")

(setq throw-pose-a 
      #f(50.0981 -2.65476 74.2725 9.07247 -113.869 172.78 -42.1726 6.74921 -1.3 63 -89 -85 -81 -105 -12 1.46389 -21.2682))
(setq throw-pose-b 
      #f(50.098 -5.86114 29.6401 33.1717 -36.0143 172.339 -8.16723 -15.2604 -1.3 63 -89 -85 -81 -105 -12 1.75789 -21.2682))

(defun get_garbage_cb (msg)
  (setq *effort* (send msg :effort))
  (setq *name* (send msg :name))
					;(print (elt *name* 39))  ;;35:l_elbow_flex_joint 39:l_gripper_finger
  (setq elbow-force (elt *effort* 35))
  (setq grasp-force (elt *effort* 39))
  (print grasp-force)
  (if (eq (boundp 'grasped) nil) (setq grasped nil))
  (print grasped)
  (cond ((and (> elbow-force 1.5f) (eq grasped nil)) ;;grasp if objects being handed
	 (progn (send *ri* :start-grasp :larm :gain 0.06) 
		;; (send *ri* :wait-interpolation)
		(setq grasped t)
		(setq time_g (car (unix:ptimes)))
		))
	((and (eq grasped t) (> grasp-force 10.0f)) ;;open clip if failed to grasp firmly
	 (progn (print "do it again")
					;(unix:sleep 8)
		(send *ri* :stop-grasp :larm :wait t)
		;; (send *ri* :wait-interpolation)
		(setq grasped nil)
		))
	((and (eq grasped t) (< elbow-force -2.0f)) ;;release if objects being taken
	 (progn (send *ri* :stop-grasp :larm :wait t)
		;; (send *ri* :wait-interpolation)
		(setq grasped nil)
		))
	((and (eq grasped t) (> (- (car (unix:ptimes)) time_g) 1000));; go to throw garbage
	 (prog (print (- (unix:runtime) time_g))
	       (print "i am moving")
	       (setq receive-coord (send *ri* :state :worldcoords))
	       (send *ri* :angle-vector throw-pose-a)
					;(send *ri* :wait-interpolation)
					;(move-to-spot "/eng2/7f/room73B2-trashbox-front" :tilt-enable nil)
	       (send *ri* :go-pos-unsafe 0.5 0 0)
	       (throw_garbage)
	       (send *ri* :move-to receive-coord)
	       (print "do it by yourself next time")
	       (setq grasped nil)
	       ))
  (print (- (car (unix:ptimes)) time_g))
     )

(defun throw_garbage()
  ;(send *ri* :angle-vector-sequence (list throw-pose-a throw-pose-b))
  (send *ri* :angle-vector throw-pose-b)
  (send *ri* :wait-interpolation)
  (send *ri* :stop-grasp :larm)
  ;(send *ri* :go-pos -0.2 0.0 0)
  ;(send *pr2* :reset-pose)
  ;; (send *pr2* :larm :collar-y :joint-angle -60)
  ;; (send *pr2* :larm :shoulder-p :joint-angle 74)
  ;; (send *pr2* :larm :shoulder-r :joint-angle 70)
  ;; (send *pr2* :larm :elbow-p :joint-angle -120)
  ;; (send *pr2* :larm :elbow-r :joint-angle 20)
  ;; (send *pr2* :larm :wrist-p :joint-angle -30)
  ;; (send *pr2* :larm :wrist-r :joint-angle 180)
  ;; (send *ri* :angle-vector (send *pr2* :angle-vector) 1500)
  ;; (send *ri* :wait-interpolation)
  (get_garbage_pose)
  )

(defun main()
  (get_garbage_pose)
  (ros::rate 10)
  (ros::subscribe "/joint_states" sensor_msgs::JointState #'get_garbage_cb)			
  (ros::ros-info "Waiting for message...")  
  (while (ros::ok)
    (ros::spin-once)
    (ros::sleep)))

(defun get_garbage_pose()
  ;;prepare to receive object
  (send *pr2* :start-grasp)
  (send *pr2* :reset-pose)
  (send *pr2* :rarm :collar-y :joint-angle -1.3)
  (send *pr2* :rarm :shoulder-p :joint-angle 63)
  (send *pr2* :rarm :shoulder-r :joint-angle -89)
  (send *pr2* :rarm :elbow-p :joint-angle -85)
  (send *pr2* :rarm :elbow-r :joint-angle -81)
  (send *pr2* :rarm :wrist-p :joint-angle -105)
  (send *pr2* :rarm :wrist-r :joint-angle -12)
  (send *ri* :angle-vector (send *pr2* :angle-vector) 1500)
  (send *ri* :wait-interpolation)
  
  (send *pr2* :larm :collar-y :joint-angle -24)
  (send *pr2* :larm :shoulder-p :joint-angle 25)
  (send *pr2* :larm :shoulder-r :joint-angle 0)
  (send *pr2* :larm :elbow-p :joint-angle -110)
  (send *pr2* :larm :elbow-r :joint-angle 200)
  (send *pr2* :larm :wrist-p :joint-angle -80)
  (send *pr2* :larm :wrist-r :joint-angle 0)
  (send *ri* :angle-vector (send *pr2* :angle-vector) 1500)
  (send *ri* :wait-interpolation)
  (send *ri* :larm :stop-grasp)
  )

(main)